<script type="text/javascript">

    // Set text value to 'text' on warning message field
    function toggleText(text) {
        document.getElementById("warning_msg").innerHTML = text;
    }

    var mapData = {}
    $(document).ready(function () {
        $('#datetimepicker6').datetimepicker()
        $('#datetimepicker7').datetimepicker({
            useCurrent: false //Important! See issue #1075
        })
        $("#datetimepicker6").on("dp.change", function (e) {
            $('#datetimepicker7').data("DateTimePicker").minDate(e.date)
        })
        $("#datetimepicker7").on("dp.change", function (e) {
            $('#datetimepicker6').data("DateTimePicker").maxDate(e.date)
        })
    })

    $("#submit_btn").on('click', function() {
        document.getElementById('submit_btn').setAttribute("class", "query_btn_disabled")
        $("#submit_btn").attr('disabled', true)
                
        var data = {
            start: $('#datetimepicker6').data("DateTimePicker").date(),
            stop: $('#datetimepicker7').data("DateTimePicker").date()
        }

        var chart = setAccChart(mapData)
                
        $.ajax({
		    type: 'POST',
			    data: JSON.stringify(data),
				contentType: 'application/json',
                url: '/profile',						
                success: function(data) {
                    mapData = JSON.stringify(data)
                },
                complete: function() {
                    document.getElementById('submit_btn').setAttribute("class", "query_btn");
                        
                    // Enable the query button again
                    $("#submit_btn").attr('disabled', false)
                        
                    // Initialize the slider to the context of POST response
                    $('#theSlider').slider({
                        max: JSON.parse(mapData).length,
                        enabled: true,
                    })
                        
                    // Pinpoint the initial marker on the map
                    var coordinates = getFirstValidPositions(mapData)
                        
                    /* Try to display an initial marker on the map if possible. Alert user if coordinates
                    * are not present.
                    */
                    if (coordinates.lon != undefined && coordinates.lat != undefined) {
                        addMarker("Bella", coordinates.lon, coordinates.lat)
                        $('#theSlider').slider('setValue', coordinates.index);
                        toggleText("Map marker set to first known GPS coordinate")
                    } else {
                        toggleText("No GPS available for the selected dataset")
                        removeMarker("Bella") //bella?
                    }

                    //setTempChart(mapData)
                    updateChartData(chart, mapData)
                }
            })
        })

    $('#theSlider').slider();

    /* As the slider moves, we want to display each (lon-lat) pair.
    * However, they might not exist. Use the latest known pair if this is the case.
    */
    $('#theSlider').on('slide', function(e){
        var lon = JSON.parse(mapData)[e.value]['pos']['lon']
        var lat = JSON.parse(mapData)[e.value]['pos']['lat']
        
        if (lon != "None" || lat != "None") {
            toggleText("Using current GPS coordinate")
            document.getElementById("theSliderTimestamp").textContent = new Date(JSON.parse(mapData)[e.value]['timestamp'])
            // bella?
            addMarker("Bella", lon, lat)
        }
        else {
            document.getElementById("theSliderTimestamp").textContent = new Date(JSON.parse(mapData)[e.value]['timestamp'])
            toggleText("No GPS available. Using last known GPS coordinate, if any")
        }

        document.getElementById("theTemperature").textContent = JSON.parse(mapData)[e.value]['temperature']
    })

    /* Returns the first valid pair of longitude-latitude coordinate values */
    function getFirstValidPositions(mapData, start=0) {
        var data = JSON.parse(mapData), i, lon, lat

        for (i = 0; i < data.length; i++) {
            if (data[i]["pos"]["lon"] != "None" && data[i]["pos"]["lat"] != "None") {
                lon = data[i]["pos"]["lon"]
                lat = data[i]["pos"]["lat"]
                break
            }
        }
        /* Index is used to move the slider to the value corresponding to
        * the coordinate pair being returned. 'Index' is index in mapData
        */
        //console.log(lat)
        return { lon: lon, lat: lat, index: i }
    }

</script>