<script type="text/javascript">
    requestAllThings("history")
    var body = []

    var chart = newChart('.ct-chart')

    // Set text value to 'text' on warning message field
    function toggleText(text) {
        document.getElementById("warning_msg").innerHTML = text;
    }

    var mapData = {}
    $(document).ready(function () {
        $('#datetimepicker6').datetimepicker()
        $('#datetimepicker7').datetimepicker({
            useCurrent: false //Important! See issue #1075
        })
        $("#datetimepicker6").on("dp.change", function (e) {
            $('#datetimepicker7').data("DateTimePicker").minDate(e.date)
        })
        $("#datetimepicker7").on("dp.change", function (e) {
            $('#datetimepicker6').data("DateTimePicker").maxDate(e.date)
        })
    })

    $("#submit_btn").on('click', function() {
        document.getElementById('submit_btn').setAttribute("class", "query_btn_disabled")
        $("#submit_btn").attr('disabled', true)
        var things = getSelectedBtns()
        
        var data = {
            start: $('#datetimepicker6').data("DateTimePicker").date(),
            stop: $('#datetimepicker7').data("DateTimePicker").date(),
            things: things
        }

        $.ajax({
		    type: 'POST',
			data: JSON.stringify(data),
			contentType: 'application/json',
            url: '/profile',						
            success: function(data) {
                mapData = JSON.stringify(data)
            },
            complete: function() {
                document.getElementById('submit_btn').setAttribute("class", "query_btn");
                body = JSON.parse(mapData)
                    
                var max = getLongestSlice(body)
                    
                // Enable the query button again
                $("#submit_btn").attr('disabled', false)
                        
                // Initialize the slider to the context of POST response
                $('#theSlider').slider({
                    max: max,
                    enabled: true
                })

                var names = getNames(body)
                for (var i = 0; i < body.length; i++) {
                    insertSensorData(body[i], body[i])
                    addHistoricPathToMap(names[i], body[i])
                }
            }
        })
    })
   
    $('#theSlider').slider();
    $('#chartSlider').slider();
    /* As the slider moves, we want to display each (lon-lat) pair.
    * However, they might not exist. Use the latest known pair if this is the case.
    */
    $('#theSlider').on('slide', function(e) {
        var names = getNames(body)
        
        for (var i = 0; i < body.length; i++) {
            if (body[i][e.value] != null) {
                var key = body[i][e.value].name
                var tempCell = document.getElementById(key + "temp")
                var accsCell = document.getElementById(key + "accs")
                var timeCell = document.getElementById(key + "timestamp")
                
                setValidCellStyle(tempCell)
                setValidCellStyle(accsCell)
                tempCell.innerHTML = body[i][e.value].temperature
                accsCell.innerHTML = body[i][e.value].sumAcc
                timeCell.innerHTML = new Date(body[i][e.value].date)

                var lng = body[i][e.value].lng
                var lat = body[i][e.value].lat

                if (lng != "None" && lat != "None") {
                    addMarker(body[i][e.value].name, lat, lng)
                }
            } else {
                var tempCell = document.getElementById(names[i] + "temp")
                var accsCell = document.getElementById(names[i] + "accs")
                setInvalidCellStyle(tempCell)
                setInvalidCellStyle(accsCell)
            }
        }

        var granularity = document.getElementById("chartSlider").value
        setChartData(chart, body[0], e.value, granularity)
    })

    /* Returns the names of all things */ 
    function getNames(data) {
        var names = []
        for (var i = 0; i < data.length; i++) {
            names.push(data[i][0].name)
        }
        return names
    }

    /* Returns the first valid pair of longitude-latitude coordinate values */
    function getFirstValidPositions(rawData, start=0) {
        var data = JSON.parse(rawData), i, lon, lat
        //console.log(rawData)
        for (i = 0; i < data.length; i++) {
            if (data[i]["pos"]["lon"] != "None" && data[i]["pos"]["lat"] != "None") {
                lon = data[i]["pos"]["lon"]
                lat = data[i]["pos"]["lat"]
                break
            }
        }
        /* Index is used to move the slider to the value corresponding to
        * the coordinate pair being returned. 'Index' is index in mapData
        */
        return { lon: lon, lat: lat, index: i }
    }

    /* Returns the length of the longest slice */
    function getLongestSlice(data) {
        var max = 0
        for (var i = 0; i < data.length; i++) {
            //console.log(data[i].length)
            if (data[i].length > max) {
                max = data[i].length
            }
        }
        return max
    }

</script>